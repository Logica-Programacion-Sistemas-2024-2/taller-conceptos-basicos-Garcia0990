/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sistemas;

public class App {
    
    // Diseñe un algoritmo para saludar al usuario: Hola usuario. El nombre del usuario es ingresado por teclado
    public static String saludarAlUsuario(String nombre) {
        try {
            
            if (nombre == null, nombre.isEmpty()) {
                return "Error: El nombre de el usuario no es valido";
            }
            return "Hola " + nombre;

        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
        return "";
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ingrese su nombre: ");
        String nombre = scanner.nextLine();
        System.out.println(saludarAlUsuario(nombre));
    }

    // Diseñe un algoritmo que lea por teclado una velocidad en Km/seg y la convierta a metros/seg y a metros/hora
    // retorne el valor en formato string (metrosPorSeg + "|" + metrosPorHora)
    public static String convertirVelocidad(double kmPorSeg) {
        try {
            double metrosPorSegundo = kilometrosPorSegundo * 1000;
            double metrosPorHora = metrosPorSegundo * 3600;
            return String.format("%.2f|%.2f", metrosPorSegundo, metrosPorHora);
        } catch (Exception e) {
            return "0|0";
        }
        return "";
    }

    public static void main(String[] args) {
        double kilometrosPorSegundo = 80; 
        String resultado = convertirVelocidad(kmPorSeg);
        System.out.println(resultado);
    }

    // Solicitar al usuario ingresar una cantidad expresada en cc (centímetros cúbicos) y devolver su cantidad en litros
    public static int convertirCcALitros(double cc) {
        try {            
            double litros = cc / 1000;
            return litros;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double cc = 9300; 
        double litros = convertirCcALitros(cc);
        if (litros != -1) {
            System.out.println(cc + " centimetros cubicos = " + litros + " litros");
        } else {
            System.out.println("Error al convertir");
        }
    }

    // Solicitar al usuario ingresar una cantidad en dólares y convertirla a pesos según la TRM del día
    public static int convertirDolaresAPesos(double dolares, double trm) {
        try {
            double pesos = dolares * trm;
            return pesos;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double dolares = 30; 
        double trm = 3980; 
        double pesos = convertirDolaresAPesos(dolares, trm);
        if (pesos != -1) {
            System.out.println(dolares + " dolares = " + pesos + " pesos");
        } else {
            System.out.println("Error al convertir");
        }
    }

    // Solicitar al usuario ingresar la temperatura en grados centígrados y convertirla en grados Fahrenheit (averiguar la fórmula) F = 32 + ( 9 * C / 5)
    public static int convertirCelsiusAFahrenheit(double celsius) {
        try {
            double fahrenheit = 32 + (9 * celsius / 5);
            return fahrenheit;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double celsius = 17; 
        double fahrenheit = convertirCelsiusAFahrenheit(celsius);
        if (fahrenheit != -1) {
            System.out.println(celsius + " grados Celsius = " + fahrenheit + " grados Fahrenheit");
        } else {
            System.out.println("Error al convertir");
        }
    }

    // Solicitar al usuario ingresar Nro de Días nro de horas nro de minutos y nro segundos y convertir todo a segundos.
    public static int convertirATotalSegundos(int dias, int horas, int minutos, int segundos) {
        try {
            if (dias < 0 || horas < 0 || minutos < 0 || segundos < 0) {
            throw new Exception("Todos los parametros tienen que ser positivos");
            }
            int totalSegundos = (dias * 24 * 60 * 60) + (horas * 60 * 60) + (minutos * 60) + segundos;
            return totalSegundos;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Ingrese los dias:");
        int dias = scanner.nextInt();
        
        System.out.println("Ingrese las horas:");
        int horas = scanner.nextInt();
        
        System.out.println("Ingrese los minutos:");
        int minutos = scanner.nextInt();
        
        System.out.println("Ingrese los segundos:");
        int segundos = scanner.nextInt();
        
        int totalSegundos = convertirATotalSegundos(dias, horas, minutos, segundos);
        
        if (totalSegundos != -1) {
            System.out.println("El total de segundos es: " + totalSegundos);
        }
    }

    // Un usuario tiene un sistema de báscula para pesar camiones, dado el peso de un camión debe sacar el peso neto de la carga en kilos y toneladas
    // retorne el valor en formato string (pesoEnKg + "|" + pesoEnToneladas)
    public static String calcularPesoNeto(double peso) {
        try {
            double pesoCamionVacio = 988;
            double pesoNetoKg = peso - pesoDeElCamionVacio;
            double pesoNetoToneladas = pesoNetoKg / 1000;
            return String.format("%.2f|%.2f", pesoNetoKilogramos, pesoNetoToneladas);
        } catch (Exception e) {
            return "0|0";
        }
        return "";
    }
    public static void main(String[] args) {
        double peso = 450; 
        String pesoNeto = calcularPesoNeto(peso);
        System.out.println("Peso neto: " + pesoNeto);
    }
    

    // Diseñe un algoritmo que calcule el tiempo necesario para alcanzar un destino dado por el usuario quien además ingresará la velocidad promedio en kilómetros/hora y la distancia en kilómetros
    public static int calcularTiempoViaje(double distancia, double velocidadKm, double velocidadHora) {
        try {
            double tiempoViaje = distancia / velocidadKm;
            return tiempoViaje;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double distancia = 70000; 
        double velocidadKm = 238; 
        double tiempoViaje = calcularTiempoViaje(distancia, velocidadKm);
        if (tiempoViaje != -1) {
            System.out.println("El tiempo necesario para alcanzar el destino es: " + tiempoViaje + " horas");
        } else {
            System.out.println("Error al calcular el tiempo de viaje");
        }
    }

    // Un avión necesita cargar combustible para cubrir sus rutas programadas en el día. Cada 0.2 toneladas de combustible puede recorrer 60.8 Km en velocidad de crucero. En el despegue el avión consume 1.2 toneladas de combustible y en el aterrizaje consume 0.4 toneladas. El piloto desea un algoritmo que ingresando 4 rutas y el kilometraje de cada ruta obtenga la cantidad de combustible que debe tanquear en el avión.
    public static int calcularCombustible(double rutaNumero1, double rutaNumero2, double rutaNumero3, double rutaNumero4) {
        try {
            double distanciaTotal = rutaNumero1 + rutaNumero2 + rutaNumero3 + rutaNumero4;
            double combustibleNecesario = distanciaTotal / 60.8;
            combustibleQueSeNecesita += 1.2 + 0.4;
            combustibleQueSeNecesita /= 0.2;
            return combustibleQueSeNecesita;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double rutaNumero1 = 69; 
        double rutaNumero2 = 13; 
        double rutaNumero3 = 1500; 
        double rutaNumero4 = 5000; 
        double combustibleQueSeNecesita = calcularCombustible(rutaNumero1, rutaNumero2, rutaNumero3, rutaNumero4);
        if (combustibleQueSeNecesita!= -1) {
            System.out.println("La cantidad de combustible que debe tanquear el avion es: " + combustibleQueSeNecesita + " toneladas");
        } else {
            System.out.println("Error al calcular el combustible");
        }
    }

    // Diseñar un algoritmo que calcule el peso neto en la luna de un peso terrestre ingresado por teclado. La gravedad de la Luna es de alrededor del 17% más que la de la tierra
    public static int calcularPesoLunar(double pesoTierra) {
        try {
            double gravedadDeLaLuna = 0.83; 
            double pesoDeLaLuna = pesoTierra * gravedadLuna;
            return pesoDeLaLuna;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double pesoDeLaTierra = 180040; 
        double pesoDeLaLuna = calcularPesoLunar(pesoTierra);
        if (pesoLuna!= -1) {
            System.out.println("El peso neto en la luna es: " + pesoLuna + " kilogramos");
        } else {
            System.out.println("Error al calcular el peso neto en la luna");
        }
    }

    // Diseñar un algoritmo que calcule el saldo que debe haber en una taquilla de un banco. El cajero deberá ingresar la base el total de recaudos y el total de retiros
    public static int calcularSaldoTaquilla(double base, double ingresos, double retiros) {
        try {
            double saldo = base + ingresos - retiros;
            return saldo;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double base = 3500000; 
        double ingresos = 780000; 
        double retiros = 1200000; 
        double saldo = calcularSaldoTaquilla(base, ingresos, retiros);
        if (saldo != -1) {
            System.out.println("El saldo en total es: " + saldo);
        } else {
            System.out.println("Error al calcular el saldo");
        }
    }

    // Diseñe un algoritmo para calcular la propina en un restaurante(10%) el impuesto al consumo (8%) y el valor final que deberá pagar ingresando el valor de la comida.
    // retorne el valor en formato string (propina + "|" + impuesto + "|" + total)
    public static String calcularCuentaRestaurante(double costoDeLaComida) {
        try {
            double propina = costoComida * 0.1;
            double impuesto = costoComida * 0.08;
            double total = costoComida + propina + impuesto;
            return String.format("%.2f|%.2f|%.2f", propina, impuesto, total);
        } catch (Exception e) {
            return -1 + "|" + -1 + "|" + -1;
        }
        return "";
    }
    public static void main(String[] args) {
        double costoDeLaComida = 3500; 
        String[] resultado = calcularCuentaRestaurante(costoDeLaComida).split("\\|");
        if (resultado[0] != "-1" && resultado[1] != "-1" && resultado[2] != "-1") {
            System.out.println("PLa porpina es: " + resultado[0]);
            System.out.println("El impuesto al consumo es: " + resultado[1]);
            System.out.println("Total: " + resultado[2]);
        } else {
            System.out.println("Error al calcular la cuenta");
        }
    }

    // Diseñar un algoritmo que obtenga los puntos finales de un equipo de fútbol (puntuación según lineamientos de Fifa) a partir de los datos ingresados por teclado: Número de partidos ganados número de partidos perdidos número de partidos empatados.
    public static int calcularPuntosFutbol(int partidosGanados, int partidosPerdidos, int partidosEmpatados) {
        try {
            int puntosTotales = partidosGanados * 3 + partidosEmpatados;
            return puntosTotales;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        int partidosGanados = 15; 
        int partidosPerdidos = 2; 
        int partidosEmpatados = 3; 
        int puntos = calcularPuntosFutbol(partidosGanados, partidosPerdidos, partidosEmpatados);
        if (puntos != -1) {
            System.out.println("Los puntos finales son: " + puntos);
        } else {
            System.out.println("Error al calcular los puntos finales");
        }
    }

    // Elaborar un algoritmo que dadas todas las 5 notas y los 5 porcentajes para una materia calcule la nota final.
    public static int calcularNotaFinal(double nota1Estudiante, double nota2Estudiante, double nota3Estudiante, double nota4Estudiante, double nota5Estudiante,
                                        double porcentajeNota1, double porcentajeNota2, double porcentajeNota3, double porcentajeNota4, double porcentajeNota5) {
        try {
            if (porcentajeNota1 + porcentajeNota2 + porcentajeNota3 + porcentajeNota4 + porcentajeNota5 = 100) {
            throw new Exception("Los porcentajes deben sumar 100");
            }
            double notaFinal = (nota1Estudiante * porcentajeNota1 / 100) + (nota2Estudiante * porcentajeNota2 / 100) + (nota3Estudiante * porcentajeNota3 / 100) + (nota4Estudiante * porcentajeNota4 / 100) + (nota5Estudiante * porcentajeNota5 / 100);
            return notaFinal;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double nota1Estudiante = 2.3; 
        double nota2Estudiante = 4.6; 
        double nota3Estudiante = 2.8; 
        double nota4Estudiante = 3.2; 
        double nota5Estudiante = 1.9; 
        double porcentajeNota1 = 15; 
        double porcentajeNota2 = 25; 
        double porcentajeNota3 = 20; 
        double porcentajeNota4 = 20; 
        double porcentajeNota5 = 20; 
        double notaFinal = calcularNotaFinal(nota1, nota2, nota3, nota4, nota5, porcentaje1, porcentaje2, porcentaje3, porcentaje4, porcentaje5);
        if (notaFinal!= -1) {
            System.out.println("La nota final es: " + notaFinal);
        } else {
            System.out.println("Error al calcular la nota final");
        }
    }

    // Elaborar un algoritmo que dados los 5 porcentajes de una materia y las 4 primeras notas calcule cuánto tiene que sacar para ganar si el puntaje mínimo es 3.
    public static int calcularNotaNecesaria(double porcentajeNota1, double porcentajeNota2, double porcentajeNota3, double porcentajeNota4, double porcentajeNota5, double nota1Estudiante, double nota2Estudiante, double nota3Estudiante, double nota4Estudiante) {
        try {
            if (porcentajeNota1 + porcentajeNota2 + porcentajeNota3 + porcentajeNota4 + porcentajeNota5 != 100) {
            throw new Exception("Los porcentajes tienen que sumar 100");
            }
            double notaTotalQueSeNecesita = 3;
            double notaTotalActual = (nota1Estudiante * porcentajeNota1 / 100) + (nota2Estudiante * porcentajeNota2 / 100) + (nota3Estudiante * porcentajeNota3 / 100) + (nota4Estudiante * porcentajeNota4 / 100);
            double notaNecesaria = (notaTotalQueSeNecesita - notaTotalActual) * 100 / porcentaje5;
            return notaNecesaria;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        double porcentajeNota1 = 30; /
        double porcentajeNota2 = 10; 
        double porcentajeNota3 = 5; 
        double porcentajeNota4 = 25; 
        double porcentajeNota5 = 30; 
        double nota1Estudiante = 5; 
        double nota2Estudiante = 4; 
        double nota3Estudiante = 2.6; 
        double nota4Estudiante = 1.3; 
        double notaNecesaria = calcularNotaNecesaria(porcentajeNota1, porcentajeNota2, porcentajeNota3, porcentajeNota4, porcentajeNota5, nota1Estudiante, nota2Estudiante, nota3Estudiante, nota4Estudiante);
        if (notaNecesaria != -1) {
            System.out.println("La nota que necesitas para ganar la materia es: " + notaNecesaria);
        } else {
            System.out.println("Error");
        }
    }

    // Se requiere un algoritmo para calcular el salario a pagar a un trabajador con los siguientes datos ingresados por teclado: cantidad de horas normales laboradas cantidad de horas extras diurnas laboradas cantidad de horas extras nocturnas laboradas valor de la hora normal. El valor de las horas extras diurnas tienen un recargo adicional del 15% sobre la hora normal. El valor de las horas extras nocturnas tienen un recargo adicional del 35% sobre la hora normal.
    public static int calcularSalario(int horasNormales, int horasExtrasDiurnas, int horasExtrasNocturnas, double valorHoraNormal) {
        try {
            double valorHoraExtraDiurna = valorHoraNormal * 1.15;
            double valorHoraExtraNocturna = valorHoraNormal * 1.35;
            double salarioTotal = (horasNormales * valorHoraNormal) + (horasExtrasDiurnas * valorHoraExtraDiurna) + (horasExtrasNocturnas * valorHoraExtraNocturna);
            return salarioTotal;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
        
            System.out.print("Ingrese la cantidad de horas normales laboradas: ");
            int horasNormales = scanner.nextInt();
        
            System.out.print("Ingrese la cantidad de horas extras diurnas laboradas: ");
            int horasExtrasDiurnas = scanner.nextInt();
        
            System.out.print("Ingrese la cantidad de horas extras nocturnas laboradas: ");
            int horasExtrasNocturnas = scanner.nextInt();
        
            System.out.print("Ingrese el valor de la hora normal: ");
            double valorHoraNormal = scanner.nextDouble();
        
            double salarioTotal = calcularSalario(horasNormales, horasExtrasDiurnas, horasExtrasNocturnas, valorHoraNormal);
            if (salarioTotal!= -1) {
            System.out.println("El salario a pagar al trabajador es: " + salarioTotal);
            } else {
            System.out.println("Error al calcular el salario");
            }
    }
}

    // Diseñe un algoritmo que calcule el área de un triángulo rectángulo.
    public static int calcularAreaTriangulo(double baseTriangulo, double alturaAltura) {
        try {
            if (baseTriangulo <= 0 || alturaAltura <= 0) {
            throw new Exception("La base y la altura de el triangulo rectangulo deben ser positivas");
            }
            double areaTriangulo = (baseTriangulo * alturaTriangulo) / 2;
            return areaTriangulo;

        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public class Main {
        public static void main(String[] args) {
            double baseTriangulo = 20; 
            double alturaTriangulo = 7; 
            
            double areaTriangulo = calcularAreaTriangulo(baseTriangulo, alturaTriangulo);
            if (areaTriangulo!= -1) {
                System.out.println("El area del triángulo rectangulo es: " + area);
            } else {
                System.out.println("Error");
            }
        }
    }

    // Diseñe un algoritmo que calcule el perímetro de un cuadrado.
    public static int calcularPerimetroCuadrado(double ladoCuadrado) {
        try {
            if (ladoCuadrado <= 0) {
            throw new Exception("El lado del cuadrado debe ser positivo");
            }
            double perimetroCuadrado = 4 * ladoCuadrado;
            return perimetroCuadrado;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public class Main {
        public static void main(String[] args) {
            double ladoCuadrado = 13; 
            
            double perimetroCuadrado = calcularPerimetroCuadrado(lado);
            if (perimetro!= -1) {
                System.out.println("El perimetro total del cuadrado es: " + perimetro);
            } else {
                System.out.println("Error");
            }
        }
    }

    // Diseñe un algoritmo que calcule el volumen de un cilindro.
    public static int calcularVolumenCilindro(double radioCilindro, double alturaCilindro) {
        try {
            if (radioCilindro <= 0 || alturaCilindro <= 0) {
            throw new Exception("El radio y la altura del cilindro tienen que ser positivos");
            }
            double volumenCilindro = Math.PI * Math.pow(radioCilindro, 2) * alturaCilindro;
            return volumenCilindro;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public class Main {
        public static void main(String[] args) {
            double radioCilindro = 47; 
            double alturaCilindro = 180; 
            
            double volumenCilindro = calcularVolumenCilindro(radioCilindro, alturaCilindro);
            if (volumen!= -1) {
                System.out.println("El volumen del cilindro es: " + volumen);
            } else {
                System.out.println("Error");
            }
        }
    }

    // Diseñe un algoritmo que calcule el área del círculo. El radio se pide por teclado.
    public static int calcularAreaCirculo(double radioCirculo) {
        try {
            if (radioCirculo <= 0) {
            throw new Exception("El radio del circulo tiene que ser positivo");
            }
            double areaCirculo = Math.PI * Math.pow(radioCirculo, 2);
            return areaCirculo;
        } catch (Exception e) {
            return -1;
        }
        return 0;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Ingrese el radio del circulo: ");
        double radioCirculo = scanner.nextDouble();
        
        double areaCirculo = calcularAreaCirculo(radio);
        if (area!= -1) {
            System.out.println("El area del circulo es: " + area);
        } else {
            System.out.println("Error al calcular el area del circulo");
        }
    }

    public static void main(String[] args) {
        
    }
}
